<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd 
                         http://www.springframework.org/schema/aop 
	                    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                         http://www.springframework.org/schema/tx 
	                    http://www.springframework.org/schema/tx/spring-tx.xsd
	                    http://www.springframework.org/schema/util
	                    http://www.springframework.org/schema/util/spring-util-3.1.xsd">
                        
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<!-- <context:component-scan base-package="com.jz.bigdata">
	<context:include-filter type="regex" expression=".service.impl.*"/>
	</context:component-scan> --> 
	
	<!-- <context:component-scan base-package="com.jz.bigdata" >   
	</context:component-scan> -->
	<!-- <context:component-scan base-package="com.jz.bigdata">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan> -->
    
	<!-- 测试添加的扫描包的方法 -->
	<!-- <context:component-scan base-package="com.jz.bigdata">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan> -->
    
    
    <!-- 测试添加的扫描包的方法 -->
	<!-- 因spring-mybitis。xml过滤了controller 在这必须加上controller 否则将找不到路径controller直接配置-->
    <context:component-scan base-package="com.jz.bigdata" >    
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> 
         <!--   <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/> --> 
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>    
     </context:component-scan>
	
	
<!-- 	 <tx:annotation-driven transaction-manager="transactionManager"/>  
  
    自动扫描dao和service包(自动注入)  
    <context:component-scan base-package="com.jz.bigdata" />   -->
	
	
    
	<!-- 激活自动代理功能 -->
	<!-- 通过aop命名空间的<aop:aspectj-autoproxy />声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面
	<aop:aspectj-autoproxy />有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<aop:aspectj-autoproxy 
	 poxy-target-class="true"/>时，表示使用CGLib动态代理技术织入增强。
	不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
	
	
	<mvc:interceptors>  
	    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />  
	    <!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
	    <bean class="com.jz.bigdata.util.AuthInterceptor"></bean>
	</mvc:interceptors>
	
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解TO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 
	<bean id="messageAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- Support JSON -->
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
				<bean class="org.springframework.http.converter.StringHttpMessageConverter" /> 
			</list>
		</property>
	</bean>
	<mvc:annotation-driven>  
	    <mvc:message-converters>  
	        <!--先进行string转换-->
	        <bean class="org.springframework.http.converter.StringHttpMessageConverter" >
	            <property name="supportedMediaTypes">    
                <list>    
                    <value>text/plain;charset=UTF-8</value>    
                    <value>text/html;charset=UTF-8</value>    
                </list>    
            </property>  
            </bean>   
	    </mvc:message-converters>  
	</mvc:annotation-driven>  
	
	<!-- 测试用的包扫描配置 -->
	 <!-- <context:component-scan base-package="com.jz.bigdata.common.department.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan> -->
	

	
	<!--  引入同文件夹下的redis属性配置文件 -->
   <!--  <import resource="spring-context.xml"/> -->
	<!-- 
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        p:host-name="${redis.host}" 
        p:port="${redis.port}" 
        p:password="${redis.pass}"  
        p:pool-config-ref="poolConfig"/>  --> 
      
    <!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory"   ref="connectionFactory" />  
    </bean>     --> 
    
    
</beans>